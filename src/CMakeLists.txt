add_definitions(-DSTATICLIB)

include_directories(${CMAKE_SOURCE_DIR}/external/argon2/include)

find_package( Threads )

file(GLOB_RECURSE BlockchainExplorer BlockchainExplorer/*)
file(GLOB_RECURSE Common Common/*)
file(GLOB_RECURSE ConnectivityTool ConnectivityTool/*)
#file(GLOB_RECURSE Crypto crypto/*)
file(GLOB_RECURSE CryptoNoteCore CryptoNoteCore/* CryptoNoteConfig.h)
file(GLOB_RECURSE CryptoNoteProtocol CryptoNoteProtocol/*)
file(GLOB_RECURSE Daemon Daemon/*)
file(GLOB_RECURSE Http HTTP/*)
file(GLOB_RECURSE InProcessNode InProcessNode/*)
file(GLOB_RECURSE Logging Logging/*)
file(GLOB_RECURSE NodeRpcProxy NodeRpcProxy/*)
file(GLOB_RECURSE Optimizer Optimizer/*)
file(GLOB_RECURSE P2p P2p/*)
file(GLOB_RECURSE Rpc Rpc/*)
file(GLOB_RECURSE Serialization Serialization/*)
file(GLOB_RECURSE Mnemonics Mnemonics/*)
file(GLOB_RECURSE SimpleWallet SimpleWallet/*)

if(MSVC)
file(GLOB_RECURSE Crypto argon2 crypto/* Platform/Windows/crypto/*)
file(GLOB_RECURSE System System/* Platform/Windows/System/*)
elseif(APPLE)
file(GLOB_RECURSE Crypto argon2 crypto/* Platform/OSX/crypto/*)
file(GLOB_RECURSE System System/* Platform/OSX/System/*)
elseif(EMSCRIPTEN)
file(GLOB_RECURSE Crypto argon2 crypto/* Platform/Emscripten/crypto/*)
file(GLOB_RECURSE System System/* Platform/Emscripten/System/*)
elseif(ARMANDROID)
file(GLOB_RECURSE Crypto argon2 crypto/* Platform/Android/crypto/*)
file(GLOB_RECURSE System System/* Platform/Android/System/*)
else()
file(GLOB_RECURSE Crypto argon2 crypto/* Platform/Linux/crypto/*)
file(GLOB_RECURSE System System/* Platform/Linux/System/*)
endif()

file(GLOB_RECURSE Transfers Transfers/*)
file(GLOB_RECURSE Wallet Wallet/*)
file(GLOB_RECURSE WalletLegacy WalletLegacy/*)

file(GLOB_RECURSE JsonRpcServer JsonRpcServer/*)

file(GLOB_RECURSE PaymentGate PaymentGate/*)
file(GLOB_RECURSE PaymentGateService PaymentGateService/*)
file(GLOB_RECURSE Miner Miner/*)

source_group("" FILES $${Common} ${ConnectivityTool} ${CryptoNoteCore} ${Crypto} ${CryptoNoteProtocol} ${Daemon} ${JsonRpcServer} ${Http} ${Logging} ${NodeRpcProxy} ${Optimizer} ${P2p} ${Rpc} ${Serialization} ${SimpleWallet} ${System} ${Transfers} ${Wallet} ${WalletLegacy} ${Mnemonics})

add_library(BlockchainExplorer ${BlockchainExplorer})
add_library(Common ${Common})
add_library(Crypto ${Crypto})
add_library(CryptoNoteCore ${CryptoNoteCore})
add_library(Http ${Http})
add_library(InProcessNode ${InProcessNode})
add_library(Logging ${Logging})
add_library(NodeRpcProxy ${NodeRpcProxy})
add_library(Rpc ${Rpc})
add_library(P2P ${CryptoNoteProtocol} ${P2p})
add_library(Serialization ${Serialization})
add_library(System ${System})
add_library(Transfers ${Transfers})
add_library(Wallet ${Wallet} ${WalletLegacy})
add_library(PaymentGate ${PaymentGate})
add_library(JsonRpcServer ${JsonRpcServer})
add_library(Mnemonics ${Mnemonics})

add_executable(ConnectivityTool ${ConnectivityTool})
add_executable(Daemon ${Daemon})
add_executable(SimpleWallet ${SimpleWallet})
add_executable(Optimizer ${Optimizer})
add_executable(PaymentGateService ${PaymentGateService})
add_executable(Miner ${Miner})

if (MSVC)
  target_link_libraries(System ws2_32)
endif ()

target_link_libraries(ConnectivityTool CryptoNoteCore Logging Crypto P2P Rpc Http Serialization Common System ${Boost_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries(Daemon CryptoNoteCore P2P Rpc Serialization System Http Logging Common Crypto upnpc-static BlockchainExplorer ${Boost_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries(SimpleWallet Wallet NodeRpcProxy Transfers Rpc Http Serialization CryptoNoteCore System Logging Common Mnemonics Crypto ${Boost_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries(Optimizer Wallet NodeRpcProxy Transfers Rpc Http Serialization CryptoNoteCore System Logging Common Mnemonics Crypto PaymentGate JsonRpcServer ${Boost_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries(PaymentGateService PaymentGate JsonRpcServer Wallet NodeRpcProxy Transfers CryptoNoteCore Crypto P2P Rpc Http Serialization System Logging Common InProcessNode upnpc-static BlockchainExplorer Mnemonics ${Boost_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries(Miner CryptoNoteCore Rpc Serialization System Http Logging Common Crypto ${Boost_LIBRARIES} ${CMAKE_THREAD_LIBS_INIT})

add_dependencies(Rpc version)
add_dependencies(ConnectivityTool version)
add_dependencies(Daemon version)
add_dependencies(SimpleWallet version)
add_dependencies(PaymentGate version)
add_dependencies(PaymentGateService version)
add_dependencies(P2P version)

if(EMSCRIPTEN)
set_property(TARGET ConnectivityTool PROPERTY OUTPUT_NAME "fedoragold_connectivity_tool.html")
set_property(TARGET SimpleWallet PROPERTY OUTPUT_NAME "fedoragold_simplewallet.html")
set_property(TARGET PaymentGateService PROPERTY OUTPUT_NAME "fedoragold_walletd.html")
set_property(TARGET Miner PROPERTY OUTPUT_NAME "fedoragold_miner.html")
set_property(TARGET Daemon PROPERTY OUTPUT_NAME "fedoragold_daemon.html")
set_property(TARGET Optimizer PROPERTY OUTPUT_NAME "fedoragold_optimizer.html")
else()
set_property(TARGET ConnectivityTool PROPERTY OUTPUT_NAME "fedoragold_connectivity_tool")
set_property(TARGET SimpleWallet PROPERTY OUTPUT_NAME "fedoragold_simplewallet")
set_property(TARGET PaymentGateService PROPERTY OUTPUT_NAME "fedoragold_walletd")
set_property(TARGET Miner PROPERTY OUTPUT_NAME "fedoragold_miner")
set_property(TARGET Daemon PROPERTY OUTPUT_NAME "fedoragold_daemon")
set_property(TARGET Optimizer PROPERTY OUTPUT_NAME "fedoragold_optimizer")
endif()
